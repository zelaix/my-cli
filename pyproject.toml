[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "my-cli"
version = "0.1.0"
description = "My CLI - A Python-based AI command-line assistant"
readme = "README.md"
license = "Apache-2.0"
authors = [
    { name = "My CLI Team" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Terminals",
    "Topic :: Utilities",
]
keywords = ["ai", "cli", "assistant", "code", "productivity"]
requires-python = ">=3.9"

dependencies = [
    # CLI Framework
    "typer>=0.12.0",
    "rich>=13.7.0",
    
    # HTTP and API
    "httpx>=0.27.0",
    "google-generativeai>=0.8.0",
    "google-auth>=2.28.0",
    
    # Data and Configuration
    "pydantic>=2.6.0",
    "pydantic-settings>=2.2.0",
    "commentjson>=0.9.0",  # JSON with comments support
    
    # File and System Operations
    "gitpython>=3.1.0",
    "pathspec>=0.12.0",  # For .gemini-ignore support
    
    # Text Processing
    "markdown>=3.6.0",
    "pygments>=2.17.0",  # Syntax highlighting
    
    # Async Support
    "anyio>=4.3.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.1.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.12.0",
    
    # Code Quality
    "ruff>=0.3.0",
    "mypy>=1.9.0",
    "pre-commit>=3.6.0",
    
    # Development Tools
    "hatch>=1.9.0",
]

mcp = [
    # MCP Protocol Support (will be implemented later)
    "websockets>=12.0",
    "jsonschema>=4.21.0",
]

all = [
    "my-cli[dev,mcp]",
]

[project.scripts]
my-cli = "my_cli.cli.app:main"

[project.urls]
Homepage = "https://github.com/your-org/my-cli"
Documentation = "https://github.com/your-org/my-cli#readme"
Repository = "https://github.com/your-org/my-cli"
Issues = "https://github.com/your-org/my-cli/issues"
Changelog = "https://github.com/your-org/my-cli/releases"

[tool.hatch.version]
path = "src/my_cli/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/my_cli"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/README.md",
    "/LICENSE",
]

# Ruff configuration for linting and formatting
[tool.ruff]
target-version = "py39"
line-length = 88
extend-exclude = [
    ".venv",
    "build",
    "dist",
    "*.egg-info",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]
ignore = [
    "E501", # line too long (handled by formatter)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["ARG001", "ARG002"]  # Allow unused args in tests

[tool.ruff.lint.isort]
known-first-party = ["my_cli"]
force-sort-within-sections = true

# MyPy configuration for type checking
[tool.mypy]
python_version = "3.9"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "google.generativeai.*",
    "google.auth.*",
    "git.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=my_cli",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]